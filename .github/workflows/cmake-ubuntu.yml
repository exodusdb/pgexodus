name: CMake on Ubuntu platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:

    strategy:
      matrix:
        ubuntu_ver: [20.04]

    runs-on: ubuntu-${{ matrix.ubuntu_ver }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Postgresql and its dev package
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-server-dev-$(apt info postgresql|&grep Depends|cut -d- -f2)

    - name: Query pg_config
      run: pg_query

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      # Install your program with the given configuration
      run: sudo cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |

        # Ensure postgresql is running
        pgrep postgres -a || sudo systemctl start postgresql

        # Ensure detailed error report if test failed
        export CTEST_OUTPUT_ON_FAILURE=1

        # Ensure ability to cd into build directory during test which uses sudo -u postgres
        chmod o+x $HOME

        # Run the test which is just tries a "create extension pgexodus"
        ctest -C ${{env.BUILD_TYPE}}
